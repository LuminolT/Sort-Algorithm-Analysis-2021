//
// Created by admin on 2021/6/23.
//

#include "Dataset.h"

void Dataset::setDataSize(int size) {
    this->size = size;
}

void Dataset::getUniformRealDistribution() {
    if (this->data.size() != 0)
    this->data.clear();
    std::random_device rd;                  //Will be used to obtain a seed for the random number engine
    std::mt19937 gen(rd());                 //Standard mersenne_twister_engine seeded with rd()
    std::uniform_real_distribution<> dis(1.0, MAXN);
    for (int n = 0; n < 10000; ++n) {
    // Use dis to transform the random unsigned int generated by gen into a
    // double in [1, 2). Each call to dis(gen) generates a new random double
        this->data.push_back(dis(gen));
    }
}

void Dataset::getGaussDistribution() {
    if (this->data.size() != 0)
        this->data.clear();
    std::random_device rd{};
    std::mt19937 gen{rd()};
    // values near the mean are the most likely
    // standard deviation affects the dispersion of generated values from the mean
    std::normal_distribution<> d{5,2};
    std::map<int, int> hist{};
    for (int i = 0; i < 1e8; ++i) {
        ++this->data[std::round(d(gen))];
    }
}
